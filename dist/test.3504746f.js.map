{"version":3,"sources":["node_modules/apple-scroller/index.js","test.js"],"names":["appleScroller","require","container1","document","getElementById","appleScroll1","imgs","addEventListener","redraw","container2","appleScroll2"],"mappings":";AAAA,MAAA,EAEA,YAAA,EAAA,EAAA,GAEA,KAAA,QAAA,EACA,KAAA,KAAA,EAGA,KAAA,aAAA,EAEA,KAAA,MAAA,EACA,KAAA,YAAA,EACA,KAAA,IAAA,IAAA,MACA,KAAA,KAAA,SAAA,gBACA,KAAA,gBACA,KAAA,gBACA,KAAA,aAEA,KAAA,IAAA,IAAA,KAAA,SAAA,GACA,KAAA,IAAA,OAAA,MAAA,KAAA,UAAA,KAAA,OACA,KAAA,oBAGA,SAAA,GACA,OAAA,KAAA,KAAA,EAAA,YAEA,gBACA,OAAA,KAAA,KAAA,MAAA,QAAA,CAAA,EAAA,MACA,IAAA,OACA,IAAA,KAAA,SAAA,GACA,KAAA,aAAA,IAIA,gBACA,KAAA,QAAA,UAAA,GACA,KAAA,UAAA,SAAA,cAAA,OACA,KAAA,QAAA,YAAA,KAAA,WACA,KAAA,UAAA,UAAA,IAAA,4BACA,KAAA,QAAA,MAAA,OAAA,KAAA,aACA,KAAA,UAAA,MAAA,OAAA,KAAA,aAEA,aACA,MAAA,EAAA,SAAA,cAAA,UACA,KAAA,OAAA,EACA,KAAA,UAAA,YAAA,GACA,KAAA,OAAA,UAAA,IAAA,yBACA,KAAA,QAAA,EAAA,WAAA,MAEA,EAAA,MAAA,MAAA,OACA,EAAA,MAAA,OAAA,OACA,EAAA,MAAA,EAAA,YACA,EAAA,OAAA,EAAA,aAGA,UAAA,GACA,IAAA,EAAA,KAAA,IAAA,KAAA,OAAA,MAAA,EAAA,MAAA,KAAA,OAAA,OAAA,EAAA,QACA,KAAA,QAAA,UAAA,EAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,OAAA,GAEA,OAAA,GACA,KAAA,IAAA,IAAA,KAAA,SAAA,GACA,KAAA,UAAA,KAAA,KAGA,oBACA,OAAA,iBAAA,SAAA,KACA,MAAA,EAAA,KAAA,IAAA,KAAA,KAAA,UAAA,KAAA,QAAA,UAAA,GACA,EAAA,KAAA,UAAA,aAAA,OAAA,YACA,EAAA,KAAA,IAAA,EAAA,EAAA,GACA,KAAA,MAAA,KAAA,IACA,KAAA,YAAA,EACA,KAAA,KAAA,EAAA,KAAA,cAEA,sBAAA,IAAA,KAAA,OAAA,KAAA,MAAA,MAIA,OAAA,GACA,EAAA,gBACA,EAAA,aACA,EAAA,oBACA,KAAA,IAAA,IAAA,KAAA,SAAA,KAAA,OACA,KAAA,IAAA,OAAA,MAAA,KAAA,UAAA,KAAA,QAIA,OAAA,QAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA,aAPA,IAAA,EAAA,EAAA,QAAA,mBAOA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAVA,IAAMA,EAAgBC,QAAQ,kBAC9BA,QAAQ,4BAIR,IAAIC,EAAaC,SAASC,eAAe,WACrCC,EAAe,IAAIL,EAAcE,EAAYI,EAA9B,QAAoC,SACvDH,SAASC,eAAe,UAAUG,iBAAiB,QAAS,WAAKF,EAAaG,OAAOH,KAErF,IAAII,EAAaN,SAASC,eAAe,WACrCM,EAAe,IAAIV,EAAcS,EAAYH,EAA9B,QAAoC","file":"test.3504746f.js","sourceRoot":"..","sourcesContent":["class appleScroller {\n\n  constructor (wrapper, imgs, scrollHeight) {\n\n    this.wrapper = wrapper\n    this.imgs = imgs\n\n    // height of scroll area. don't use different units between these\n    this.scrollHeight = scrollHeight\n\n    this.index = 0\n    this.frameLength = 0\n    this.img = new Image()\n    this.html = document.documentElement\n    this.preloadImages()\n    this.initContainer()\n    this.initCanvas()\n\n    this.img.src = this.getFrame(1)\n    this.img.onload = () => {this.fillImage(this.img)}\n    this.addScrollListener()\n  }\n\n  getFrame (index) {\n    return this.imgs[index.toString()]\n  }\n  preloadImages () {\n    Object.keys(this.imgs).forEach((key, ind) => {\n      const img = new Image\n      img.src = this.getFrame(ind)\n      this.frameLength += 1\n    })\n  }\n\n  initContainer () {\n    this.wrapper.innerHTML = ''\n    this.container = document.createElement('div')\n    this.wrapper.appendChild(this.container)\n    this.container.classList.add('apple-scroller-container')\n    this.wrapper.style.height = this.scrollHeight\n    this.container.style.height = this.scrollHeight\n  }\n  initCanvas () {\n    const canvas = document.createElement('canvas')\n    this.canvas = canvas\n    this.container.appendChild(canvas)\n    this.canvas.classList.add('apple-scroller-canvas')\n    this.context = canvas.getContext('2d')\n\n    canvas.style.width = '100%'\n    canvas.style.height = '100%'\n    canvas.width = canvas.offsetWidth\n    canvas.height = canvas.offsetHeight\n  }\n\n  fillImage (img) {\n    let scale = Math.max(this.canvas.width/img.width, this.canvas.height/img.height)\n    this.context.drawImage(img, 0, 0, img.width*scale, img.height*scale)\n  }\n  update (idx) {\n    this.img.src = this.getFrame(idx)\n    this.fillImage(this.img)\n  }\n\n  addScrollListener () {\n    window.addEventListener('scroll', () => {\n      const scrollTop = Math.max(this.html.scrollTop - this.wrapper.offsetTop, 0)\n      const maxScrollTop = this.container.scrollHeight - window.innerHeight\n      const scrollFraction = Math.min(scrollTop / maxScrollTop, 1)\n      this.index = Math.min(\n        this.frameLength - 1,\n        Math.ceil(scrollFraction * this.frameLength)\n      )\n      requestAnimationFrame(() => this.update(this.index + 1))\n    })\n  }\n\n  redraw (self) {\n    self.initContainer()\n    self.initCanvas()\n    self.addScrollListener()\n    this.img.src = this.getFrame(this.index)\n    this.img.onload = () => {this.fillImage(this.img)}\n  }\n}\n\nmodule.exports = appleScroller","const appleScroller = require('apple-scroller')\nrequire('apple-scroller/style.css')\n\nimport imgs from './render/*.png'\n\nlet container1 = document.getElementById('scroll1') \nlet appleScroll1 = new appleScroller(container1, imgs, '300vh')\ndocument.getElementById('redraw').addEventListener('click', ()=>{appleScroll1.redraw(appleScroll1)})\n\nlet container2 = document.getElementById('scroll2')\nlet appleScroll2 = new appleScroller(container2, imgs, '1000vh')"]}